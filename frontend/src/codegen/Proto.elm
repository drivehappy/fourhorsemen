{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}


module Proto exposing
    ( CSMainType(..), SCMainType(..), CSMain, SCMain
    , cSMainDecoder, sCMainDecoder
    , toCSMainEncoder, toSCMainEncoder
    )

{-| ProtoBuf module: `Proto`

This module was generated automatically using

  - [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 1.0.0-beta-2
  - `protoc` 3.14.0
  - the following specification file: `root.proto`

To run it use [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.1.0) version 1.1.0 or higher.


# Model

@docs CSMainType, SCMainType, CSMain, SCMain


# Decoder

@docs cSMainDecoder, sCMainDecoder


# Encoder

@docs toCSMainEncoder, toSCMainEncoder

-}

import Protobuf.Decode as Decode
import Protobuf.Encode as Encode



-- MODEL


{-| `CSMainType` enumeration
-}
type CSMainType
    = CsTest
    | CsTest2
    | CSMainTypeUnrecognized_ Int


{-| `SCMainType` enumeration
-}
type SCMainType
    = ScTest2
    | SCMainTypeUnrecognized_ Int


{-| `CSMain` message
-}
type alias CSMain =
    { type_ : CSMainType
    }


{-| `SCMain` message
-}
type alias SCMain =
    { type_ : SCMainType
    , test : String
    }



-- DECODER


cSMainTypeDecoder : Decode.Decoder CSMainType
cSMainTypeDecoder =
    Decode.int32
        |> Decode.map
            (\value ->
                case value of
                    0 ->
                        CsTest

                    1 ->
                        CsTest2

                    v ->
                        CSMainTypeUnrecognized_ v
            )


sCMainTypeDecoder : Decode.Decoder SCMainType
sCMainTypeDecoder =
    Decode.int32
        |> Decode.map
            (\value ->
                case value of
                    0 ->
                        ScTest2

                    v ->
                        SCMainTypeUnrecognized_ v
            )


{-| `CSMain` decoder
-}
cSMainDecoder : Decode.Decoder CSMain
cSMainDecoder =
    Decode.message (CSMain CsTest)
        [ Decode.optional 1 cSMainTypeDecoder setType_
        ]


{-| `SCMain` decoder
-}
sCMainDecoder : Decode.Decoder SCMain
sCMainDecoder =
    Decode.message (SCMain ScTest2 "")
        [ Decode.optional 1 sCMainTypeDecoder setType_
        , Decode.optional 2 Decode.string setTest
        ]



-- ENCODER


toCSMainTypeEncoder : CSMainType -> Encode.Encoder
toCSMainTypeEncoder value =
    Encode.int32 <|
        case value of
            CsTest ->
                0

            CsTest2 ->
                1

            CSMainTypeUnrecognized_ v ->
                v


toSCMainTypeEncoder : SCMainType -> Encode.Encoder
toSCMainTypeEncoder value =
    Encode.int32 <|
        case value of
            ScTest2 ->
                0

            SCMainTypeUnrecognized_ v ->
                v


{-| `CSMain` encoder
-}
toCSMainEncoder : CSMain -> Encode.Encoder
toCSMainEncoder model =
    Encode.message
        [ ( 1, toCSMainTypeEncoder model.type_ )
        ]


{-| `SCMain` encoder
-}
toSCMainEncoder : SCMain -> Encode.Encoder
toSCMainEncoder model =
    Encode.message
        [ ( 1, toSCMainTypeEncoder model.type_ )
        , ( 2, Encode.string model.test )
        ]



-- SETTERS


setType_ : a -> { b | type_ : a } -> { b | type_ : a }
setType_ value model =
    { model | type_ = value }


setTest : a -> { b | test : a } -> { b | test : a }
setTest value model =
    { model | test = value }
